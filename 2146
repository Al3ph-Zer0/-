#include <cstdio>
#include <queue>
using namespace std;
 
int N;
int a[101][101];
int g[101][101];
int d[101][101];
int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};
 
int main() {
	scanf("%d", &N);
	for (int i=0; i<N; i++) {
		for (int j=0; j<N; j++) {
			scanf("%d", &a[i][j]);
		}
	}
	int cnt = 0;	
	for (int i=0; i<N; i++) {
		for (int j=0; j<N; j++) {
			if (a[i][j] == 1 && g[i][j] == 0) {	
				queue<pair<int,int>> q;
				q.push(make_pair(i, j));
				g[i][j] = ++cnt;
				while (!q.empty()) {
					int n = q.front().first;
					int m = q.front().second;
					q.pop();
					for (int k=0; k<4; k++) {
						int nx = n + dx[k];
						int my = m + dy[k];
						if (0<=nx && nx<N && 0<=my && my<N) {
							if (a[nx][my]==1 && g[nx][my]==0) {
								g[nx][my] = cnt;
								q.push(make_pair(nx, my));
							}
						}
					}
				}
			}
		}
	}
	queue<pair<int,int>> q;	
	for (int i=0; i<N; i++) {
		for (int j=0; j<N; j++) {
			d[i][j] = -1;
			if (a[i][j] == 1) {
				q.push(make_pair(i, j));
				d[i][j] = 0;
			}
		}
	}
	while (!q.empty()) {
				int n = q.front().first;
				int m = q.front().second;
				q.pop();
				for (int k=0; k<4; k++) {
					int nx = n + dx[k];
					int my = m + dy[k];
					if (0<=nx && nx<N && 0<=my && my<N) {
						if (d[nx][my]==-1) {
							d[nx][my] = d[n][m] + 1;
							g[nx][my] = g[n][m];
							q.push(make_pair(nx, my));
						}
					}
				}
	}
	int ans = -1;
	for (int i=0; i<N; i++) {
		for (int j=0; j<N; j++) {
			for (int k=0; k<4; k++) {
				int nx = i + dx[k];
				int my = j + dy[k];
					if (0<=nx && nx<N && 0<=my && my<N) {
						if (g[i][j] != g[nx][my]) {
							if (ans == -1 || ans > d[i][j] + d[nx][my]) {
								ans = d[i][j] + d[nx][my];
							}
						}
					}
			}
		}	
	}
	printf("%d", ans);
	return 0;
}
